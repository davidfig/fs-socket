(()=>{var R=Object.create;var c=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,W=Object.prototype.hasOwnProperty;var D=s=>c(s,"__esModule",{value:!0});var d=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports);var L=(s,e,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of j(e))!W.call(s,i)&&i!=="default"&&c(s,i,{get:()=>e[i],enumerable:!(t=P(e,i))||t.enumerable});return s},q=s=>L(D(c(s!=null?R(T(s)):{},"default",s&&s.__esModule&&"default"in s?{get:()=>s.default,enumerable:!0}:{value:s,enumerable:!0})),s);var f=d((U,p)=>{p.exports=function(e,t){var i="000000000"+e;return i.substr(i.length-t)}});var h=d((G,S)=>{var J=f(),N=typeof window=="object"?window:self,O=Object.keys(N).length,V=navigator.mimeTypes?navigator.mimeTypes.length:0,$=J((V+navigator.userAgent.length).toString(36)+O.toString(36),4);S.exports=function(){return $}});var M=d((H,F)=>{var u,k=typeof window!="undefined"&&(window.crypto||window.msCrypto)||typeof self!="undefined"&&self.crypto;k?(v=Math.pow(2,32)-1,u=function(){return Math.abs(k.getRandomValues(new Uint32Array(1))[0]/v)}):u=Math.random;var v;F.exports=u});var C=d((K,E)=>{var l=h(),m=f(),A=M(),n=0,y=4,g=36,b=Math.pow(g,y);function w(){return m((A()*b<<0).toString(g),y)}function x(){return n=n<b?n:0,n++,n-1}function o(){var s="c",e=new Date().getTime().toString(g),t=m(x().toString(g),y),i=l(),r=w()+w();return s+e+t+i+r}o.slug=function(){var e=new Date().getTime().toString(36),t=x().toString(36).slice(-4),i=l().slice(0,1)+l().slice(-1),r=w().slice(-2);return e.slice(-2)+t+i+r};o.isCuid=function(e){return typeof e!="string"?!1:!!e.startsWith("c")};o.isSlug=function(e){if(typeof e!="string")return!1;var t=e.length;return t>=7&&t<=10};o.fingerprint=l;E.exports=o});var a=q(C()),z={host:"ws://localhost:9998",key:""},B=class{constructor(){this.waiting={directory:{},readFile:{},exists:{},writeFile:{}}}async connect(e={}){return new Promise(t=>{this.waiting.login=t,this.options={...z,...e},this.ws=new WebSocket(this.options.host),this.ws.addEventListener("open",()=>{this.options.debug&&console.log("WebSocket connection opened."),this.ws.send(JSON.stringify({type:"fss-login",key:e.key}))}),this.ws.addEventListener("message",i=>{this.handleMessage(JSON.parse(i.data))}),this.ws.addEventListener("close",()=>{e.onClose&&e.onClose(),this.waiting.login&&(this.waiting.login(!1),this.waiting.login=void 0),this.ready=!1}),this.ws.addEventListener("error",i=>{e.onError&&e.onError(i),this.options.debug&&console.warn(i)})})}handleMessage(e){if(this.options.debug&&console.log(`Received message ${e.type} from server`),e.type==="fss-login"){if(this.waiting.login){let t=e.results;this.ready=t,this.options.debug&&console.log(`Client login was ${t?"successful":"unsuccessful"}`),this.waiting.login(t)}}else if(e.type==="fss-dir"){let t=e;this.waiting.directory[t.id](t)}else if(e.type==="fss-readFile"){let t=e;this.waiting.readFile[t.id](t)}else if(e.type==="fss-exists"){let t=e;this.waiting.exists[t.id](t)}else if(e.type==="fss-writeFile"){let t=e;this.waiting.writeFile[t.id](t)}else console.warn(`Received unknown message ${e.type} from server`)}async directory(e,t=!0){return this.ready?new Promise(i=>{let r=(0,a.default)();this.ws.send(JSON.stringify({type:"fss-dir",directory:e,recursive:t,id:r})),this.waiting.directory[r]=i}):(this.options.debug&&console.log("Tried to request directory when socket connection was not ready"),{type:"fss-dir",directory:e,recursive:t,id:"",error:"FSSClient is not ready"})}async exists(e){return this.ready?new Promise(t=>{let i=(0,a.default)();this.ws.send(JSON.stringify({type:"fss-exists",file:e,id:i})),this.waiting.exists[i]=t}):(this.options.debug&&console.log("Tried to request directory when socket connection was not ready"),{type:"fss-exists",file:e,id:"",error:"FSSClient is not ready"})}async readFile(e,t="json"){return this.ready?new Promise(i=>{let r=(0,a.default)();this.ws.send(JSON.stringify({type:"fss-readFile",file:e,fileType:t||"json",id:r})),this.waiting.readFile[r]=i}):(this.options.debug&&console.log("Tried to readFile when socket connection was not ready"),{type:"fss-readFile",id:"",file:e,fileType:t,error:"FSSClient is not ready"})}async writeFile(e,t){return this.ready?new Promise(i=>{let r=(0,a.default)();this.ws.send(JSON.stringify({type:"fss-writeFile",file:e,data:t,id:r})),this.waiting.writeFile[r]=i}):(this.options.debug&&console.log("Tried to writeFile when socket connection was not ready"),{type:"fss-writeFile",id:"",file:e,data:t,error:"FSSClient is not ready"})}};})();
//# sourceMappingURL=client.js.map
